// Mocks generated by Mockito 5.3.2 from annotations
// in test_mobile_ca/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i8;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:test_mobile_ca/models/bank_account.dart' as _i7;
import 'package:test_mobile_ca/service/bank_service.dart' as _i4;
import 'package:test_mobile_ca/utils/snack_bar.dart' as _i5;
import 'package:test_mobile_ca/views/home_screen.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeState_0<T extends _i1.StatefulWidget> extends _i2.SmartFake
    implements _i1.State<T> {
  _FakeState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_1 extends _i2.SmartFake
    implements _i1.StatefulElement {
  _FakeStatefulElement_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i2.SmartFake
    implements _i1.DiagnosticsNode {
  _FakeDiagnosticsNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeGlobalKey_3<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake implements _i1.GlobalKey<T> {
  _FakeGlobalKey_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBankService_4 extends _i2.SmartFake implements _i4.BankService {
  _FakeBankService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnackBarUtil_5 extends _i2.SmartFake implements _i5.SnackBarUtil {
  _FakeSnackBarUtil_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeScreen_6 extends _i2.SmartFake implements _i6.HomeScreen {
  _FakeHomeScreen_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_7 extends _i2.SmartFake implements _i1.BuildContext {
  _FakeBuildContext_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_8 extends _i2.SmartFake implements _i1.Widget {
  _FakeWidget_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [HomeScreen].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeScreen extends _i2.Mock implements _i6.HomeScreen {
  MockHomeScreen() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.State<_i6.HomeScreen> createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeState_0<_i6.HomeScreen>(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i1.State<_i6.HomeScreen>);
  @override
  _i1.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_1(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i1.StatefulElement);
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toStringShallow({
    String? joiner = r', ',
    _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i1.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i1.DiagnosticsNode);
  @override
  List<_i1.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i1.DiagnosticsNode>[],
      ) as List<_i1.DiagnosticsNode>);
  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [HomeScreenState].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeScreenState extends _i2.Mock implements _i6.HomeScreenState {
  MockHomeScreenState() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.ScaffoldState> get scaffoldKey => (super.noSuchMethod(
        Invocation.getter(#scaffoldKey),
        returnValue: _FakeGlobalKey_3<_i1.ScaffoldState>(
          this,
          Invocation.getter(#scaffoldKey),
        ),
      ) as _i1.GlobalKey<_i1.ScaffoldState>);
  @override
  List<_i7.BankAccount> get bankAccountList => (super.noSuchMethod(
        Invocation.getter(#bankAccountList),
        returnValue: <_i7.BankAccount>[],
      ) as List<_i7.BankAccount>);
  @override
  set bankAccountList(List<_i7.BankAccount>? _bankAccountList) =>
      super.noSuchMethod(
        Invocation.setter(
          #bankAccountList,
          _bankAccountList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.BankService get bankService => (super.noSuchMethod(
        Invocation.getter(#bankService),
        returnValue: _FakeBankService_4(
          this,
          Invocation.getter(#bankService),
        ),
      ) as _i4.BankService);
  @override
  set bankService(_i4.BankService? _bankService) => super.noSuchMethod(
        Invocation.setter(
          #bankService,
          _bankService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.SnackBarUtil get snackBarUtil => (super.noSuchMethod(
        Invocation.getter(#snackBarUtil),
        returnValue: _FakeSnackBarUtil_5(
          this,
          Invocation.getter(#snackBarUtil),
        ),
      ) as _i5.SnackBarUtil);
  @override
  set snackBarUtil(_i5.SnackBarUtil? _snackBarUtil) => super.noSuchMethod(
        Invocation.setter(
          #snackBarUtil,
          _snackBarUtil,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.HomeScreen get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeHomeScreen_6(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i6.HomeScreen);
  @override
  _i1.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_7(
          this,
          Invocation.getter(#context),
        ),
      ) as _i1.BuildContext);
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  void initState() => super.noSuchMethod(
        Invocation.method(
          #initState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i1.Widget build(_i1.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_8(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i1.Widget);
  @override
  void didUpdateWidget(_i6.HomeScreen? oldWidget) => super.noSuchMethod(
        Invocation.method(
          #didUpdateWidget,
          [oldWidget],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void reassemble() => super.noSuchMethod(
        Invocation.method(
          #reassemble,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setState(_i8.VoidCallback? fn) => super.noSuchMethod(
        Invocation.method(
          #setState,
          [fn],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void deactivate() => super.noSuchMethod(
        Invocation.method(
          #deactivate,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void activate() => super.noSuchMethod(
        Invocation.method(
          #activate,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangeDependencies() => super.noSuchMethod(
        Invocation.method(
          #didChangeDependencies,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i1.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i1.DiagnosticsNode);
}
